# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#工作流的名称，这里是 Java CI with Maven。
name: Java CI with Maven
#指定工作流的触发条件。当 master 分支有 push 操作（代码推送）或 pull_request 操作（拉取请求）时，工作流会被触发
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
#jobs：定义工作流中的作业，这里只有一个名为 build 的作业。
#runs-on：指定作业运行的环境，这里使用最新的 Ubuntu 系统。
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      #      uses：使用 actions/checkout@v4 这个 GitHub 官方提供的 Action，用于将代码仓库中的代码检出到运行环境中。
      #      name：步骤的名称，这里是 Set up JDK 21。
      #uses：使用 actions/setup-java@v4 这个 Action 来设置 Java 开发环境。
      #with：为 Action 提供参数。
      #java-version：指定 Java 版本为 21。
      #distribution：指定 Java 发行版为 temurin。
      #cache：开启 Maven 依赖缓存，以提高构建速度。
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      #          name：步骤的名称，这里是 Build with Maven。
      #run：在运行环境中执行命令。mvn -B package --file pom.xml -Dmaven.test.skip=true 表示使用 Maven 进行打包操作，-B 选项表示以批处理模式运行，--file pom.xml 指定使用 pom.xml 作为 Maven 配置文件，-Dmaven.test.skip=true 表示跳过测试。
      - name: Build with Maven
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
        # copy
      #        name：步骤的名称，这里是 copy file via ssh password。
      #uses：使用 appleboy/scp-action@v0.1.7 这个第三方 Action 来通过 SSH 协议将文件复制到远程服务器。
      #with：为 Action 提供参数。
      #host：远程服务器的主机名或 IP 地址，从 GitHub 仓库的 Secrets 中获取。
      #username：登录远程服务器的用户名，从 Secrets 中获取。
      #password：登录远程服务器的密码，从 Secrets 中获取。
      #source：要复制的源文件，这里是 target 目录下的所有 .jar 文件。
      #target：目标路径，从 Secrets 中获取。
      #strip_components：设置为 1 表示只复制文件，不复制目录结构。
      #rm：设置为 true 表示在复制前先删除目标路径下的同名文件。
      - name: copy file via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          source: "target/*.jar"
          target: ${{ secrets.TARGET }}
          # 仅复制文件，不复制目录
          strip_components: 1
          rm: true
      # deploy
      #      name：步骤的名称，这里是 executing remote ssh commands using password。
      #uses：使用 appleboy/ssh-action@v1.0.3 这个第三方 Action 来通过 SSH 协议在远程服务器上执行命令。
      #with：为 Action 提供参数。
      #host：远程服务器的主机名或 IP 地址，从 GitHub 仓库的 Secrets 中获取。
      #username：登录远程服务器的用户名，从 Secrets 中获取。
      #password：登录远程服务器的密码，从 Secrets 中获取。
      #script：要在远程服务器上执行的脚本，从 Secrets 中获取。根据注释，该脚本可能是用于重新创建 Docker 容器的命令，如 cd /home/services/se-invigilation/ && docker compose up --force-recreate --no-deps -d openjdk。
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          # cd /home/hemy/services/lab_management/
          # docker compose up --force-recreate --no-deps -d openjdk
#  docker compose 是 Docker 官方提供的一个用于定义和运行多容器 Docker 应用的工具。
#  docker compose up 命令用于启动所有在 docker-compose.yml 文件中定义的服务，或者指定的服务。
# --force-recreate
 #该参数的作用是强制重新创建容器，即使容器的配置和镜像没有发生改变。通常情况下，docker compose up 会检查容器的配置和镜像是否有变化，如果没有变化，它会尝试复用现有的容器，而不是重新创建。但使用 --force-recreate 后，无论容器的状态如何，都会重新创建容器。
#--no-deps
#此参数表示在启动指定服务时，不启动该服务所依赖的其他服务。在 docker-compose.yml 文件中，你可以定义服务之间的依赖关系，默认情况下，docker compose up 会自动启动依赖的服务。使用 --no-deps 可以跳过这个过程，只启动指定的服务。
#          -d
          #这是 --detach 的简写形式，意思是让容器在后台运行（即守护进程模式）。使用该参数后，容器启动后不会在终端显示日志输出，而是直接返回命令行界面，方便你继续执行其他操作。
#          openjdk
          #这里的 openjdk 是指在 docker-compose.yml 文件中定义的一个服务名称。该命令会针对 openjdk 这个服务执行相应的操作，即强制重新创建并在后台启动该服务对应的容器，同时不启动其依赖的服务。
          script: ${{ secrets.RECREATE_CONTAINER }}